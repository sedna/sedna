
; File:  prec-qs.scm
; Copyright (C) 2004 The Institute for System Programming of the Russian Academy of Sciences (ISP RAS)

(declare (unit prec-qs))

; precompiled query for dinamic security checking while access to document("...")


; precompiled query for stand-alone security checking of privileges non-associated with database objects (associated with a whole database)
; (CREATE-DOCUMENT, CREATE-COLLECTION, LOAD, CREATE-USER, RETRIEVE-METADATA (maybe some privilege will be added later))
(define sc:q2
  (lambda (user privilege error-message)
    `(query (prolog) (query-body (if@ (let@ (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$%v")))) (if@ (=@ (ddo (child (var ("" "$%v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,user)) (var ("" "$%v")) (sequence))))) (fun-def ((xs:anyType (var ("" "u")))) (sequence (return (sequence (ddo (child (ddo (child (var ("" "u")) (type (elem-test (ename (const (type !xs!QName) ("" "privileges")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "privilege")) (type *) (const (type !xs!string) "non-nil")))))) (ddo (child (ddo (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "roles")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$%v")))) (if@ (=@ (ddo (child (var ("" "$%v")) (type (elem-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (ddo (attr-axis (ddo (child (var ("" "u")) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil")))))) (type (attr-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil"))))))) (var ("" "$%v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "privileges")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "privilege")) (type *) (const (type !xs!string) "non-nil"))))))) (fun-def ((!xs!anyType (var ("" "$%v")))) (if@ (and@ (or@ (=@ (ddo (child (var ("" "$%v")) (type (elem-test (ename (const (type !xs!QName) ("" "pr_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,privilege)) (=@ (ddo (child (var ("" "$%v")) (type (elem-test (ename (const (type !xs!QName) ("" "pr_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) "ALL"))) (!fn!empty (ddo (child (var ("" "$%v")) (type (elem-test (ename (const (type !xs!QName) ("" "database_obj")) (type *) (const (type !xs!string) "non-nil")))))))) (var ("" "$%v")) (sequence)))) (ddo (return (child (var ("" "u")) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$%v")))) (if@ (=@ (ddo (attr-axis (var ("" "$%v")) (type (attr-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) "DBA")) (var ("" "$%v")) (sequence)))))))) (const (type !xs!boolean) true) (!fn!error (!fn!QName (const (type !xs!string) "http://www.modis.ispras.ru/sedna") (const (type !xs!string) "SE3072")) (const (type !xs!string) ,error-message)))))
    ))
   

; precompiled query: does user 'user' have a privilege 'privilege' on an object 'doc-name'
(define sc:q4
  (lambda (user privilege doc-name type-obj error-message)
    `(query (prolog) (query-body (if@ (let@ (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$%v")))) (if@ (=@ (ddo (child (var ("" "$%v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,user)) (var ("" "$%v")) (sequence))))) (fun-def ((xs:anyType (var ("" "u")))) (sequence (ddo (return (child (return (sequence (ddo (child (ddo (child (var ("" "u")) (type (elem-test (ename (const (type !xs!QName) ("" "privileges")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "privilege")) (type *) (const (type !xs!string) "non-nil")))))) (ddo (child (ddo (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "roles")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$%v")))) (if@ (=@ (ddo (child (var ("" "$%v")) (type (elem-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (ddo (attr-axis (ddo (child (var ("" "u")) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil")))))) (type (attr-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil"))))))) (var ("" "$%v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "privileges")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "privilege")) (type *) (const (type !xs!string) "non-nil"))))))) (fun-def ((!xs!anyType (var ("" "$%v")))) (if@ (and@ (or@ (or@ (=@ (ddo (child (var ("" "$%v")) (type (elem-test (ename (const (type !xs!QName) ("" "pr_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,privilege)) (=@ (ddo (child (var ("" "$%v")) (type (elem-test (ename (const (type !xs!QName) ("" "pr_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) "OWNER"))) (=@ (ddo (child (var ("" "$%v")) (type (elem-test (ename (const (type !xs!QName) ("" "pr_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) "ALL"))) (=@ (ddo (child (var ("" "$%v")) (type (elem-test (ename (const (type !xs!QName) ("" "database_obj")) (type *) (const (type !xs!string) "non-nil")))))) ,doc-name)) (var ("" "$%v")) (sequence)))) (type (elem-test (ename (const (type !xs!QName) ("" "database_obj")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$%v")))) (if@ (=@ (ddo (attr-axis (var ("" "$%v")) (type (attr-test (ename (const (type !xs!QName) ("" "type_obj")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,type-obj)) (var ("" "$%v")) (sequence))))) (ddo (return (child (var ("" "u")) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$%v")))) (if@ (=@ (ddo (attr-axis (var ("" "$%v")) (type (attr-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) "DBA")) (var ("" "$%v")) (sequence)))))))) (const (type !xs!boolean) true) (!fn!error (!fn!QName (const (type !xs!string) "http://www.modis.ispras.ru/sedna") (const (type !xs!string) "SE3072")) (const (type !xs!string) ,error-message)))))
    ))
    
    
; precompiled query for UPDATE medatada while
; DROP DOCUMENT "..."/ DROP COLLECTION "" /DROP INDEX ""
(define sc:q5
  (lambda (doc-name type-obj)
    `(update (prolog) (delete (ddo (return (child (ddo (descendant-or-self (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (node-test)))) (type (elem-test (ename (const (type !xs!QName) ("" "privilege")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (and@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "database_obj")) (type *) (const (type !xs!string) "non-nil")))))) ,doc-name) (=@ (ddo (attr-axis (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "database_obj")) (type *) (const (type !xs!string) "non-nil")))))) (type (attr-test (ename (const (type !xs!QName) ("" "type_obj")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,type-obj))) (var ("" "$v")) (sequence)))))))
    ))
     
; precompiled query for UPDATE metadata while
; CREATE ROLE "..."
(define sc:q6
  (lambda (user role-name)
    `(update (prolog) (insert-into (element (const (type !xs!QName) ("" "role")) (sequence (element (const (type !xs!QName) ("" "role_name")) (const (type !xs!string) ,role-name)) (element (const (type !xs!QName) ("" "creator")) (const (type !xs!string) ,user)) (element (const (type !xs!QName) ("" "privileges")) (sequence)))) (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "roles")) (type *) (const (type !xs!string) "non-nil"))))))))
    ))

; precompiled query for UPDATE metadata while
; DROP ROLE "..."
(define sc:q7
  (lambda (role-name)
    `(update (prolog) (delete (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "roles")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,role-name)) (var ("" "$v")) (sequence)))))))
    ))

;precompiled query for Security checking while
; DROP ROLE (is the user is the creator of the role?)
(define sc:q8
  (lambda (user role-name)
    `(query (prolog) (query-body (if@ (!fn!not (!fn!empty (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "roles")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (and@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,role-name)) (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "creator")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,user))) (var ("" "$v")) (sequence))))))) (const (type !xs!boolean) true) (!fn!error (!fn!QName (const (type !xs!string) "http://www.modis.ispras.ru/sedna") (const (type !xs!string) "SE3072")) (const (type !xs!string) "User does not have a privilege to drop the role or the role does not exist")))))
    ))

; precompiled query for Security Check while
; GRANT "role1" TO "user|role" (does the role exist + is user the OWNER of every object in role?)
(define sc:q9
  (lambda (grantor role-name)
    `(query (prolog) (query-body (let@ (ddo (child (ddo (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "roles")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,role-name)) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "privileges")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "privilege")) (type *) (const (type !xs!string) "non-nil")))))) (fun-def ((xs:anyType (var ("" "a")))) (let@ (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantor)) (var ("" "$v")) (sequence))))) (fun-def ((xs:anyType (var ("" "b")))) (if@ (!fn!empty (ddo (parent (ddo (parent (var ("" "a")) (type (node-test)))) (type (node-test))))) (!fn!error (!fn!QName (const (type !xs!string) "http://www.modis.ispras.ru/sedna") (const (type !xs!string) "SE3072")) (const (type !xs!string) "User does not have all the privileges needed to grant the role or the role does not exist")) (if@ (!fn!empty (var ("" "a"))) (const (type !xs!boolean) true) (if@ (ddo (return (child (var ("" "b")) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (attr-axis (var ("" "$v")) (type (attr-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) "DBA")) (var ("" "$v")) (sequence))))) (const (type !xs!boolean) true) (if@ (and@ (!fn!not (!fn!empty (ddo (child (var ("" "a")) (type (elem-test (ename (const (type !xs!QName) ("" "database_obj")) (type *) (const (type !xs!string) "non-nil")))))))) (ddo (return (child (ddo (return (child (ddo (child (var ("" "b")) (type (elem-test (ename (const (type !xs!QName) ("" "privileges")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "privilege")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (and@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "pr_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) "OWNER")) (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "database_obj")) (type *) (const (type !xs!string) "non-nil")))))) (ddo (child (var ("" "a")) (type (elem-test (ename (const (type !xs!QName) ("" "database_obj")) (type *) (const (type !xs!string) "non-nil")))))))) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "database_obj")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (attr-axis (var ("" "$v")) (type (attr-test (ename (const (type !xs!QName) ("" "type_obj")) (type *) (const (type !xs!string) "non-nil")))))) (ddo (attr-axis (ddo (child (var ("" "a")) (type (elem-test (ename (const (type !xs!QName) ("" "database_obj")) (type *) (const (type !xs!string) "non-nil")))))) (type (attr-test (ename (const (type !xs!QName) ("" "type_obj")) (type *) (const (type !xs!string) "non-nil"))))))) (var ("" "$v")) (sequence)))))) (const (type !xs!boolean) true) (!fn!error (!fn!QName (const (type !xs!string) "http://www.modis.ispras.ru/sedna") (const (type !xs!string) "SE3072")) (const (type !xs!string) "User does not have all the privileges needed to grant the role or the role does not exist"))))))))))))    
    ))


; precompiled query for UPDATE metadata while
; GRANT "role1" TO "user|role" 
(define sc:q10
  (lambda (grantor role-name grantee)
    `(update (prolog) (insert-into (element (const (type !xs!QName) ("" "role")) (sequence (attribute (const (type !xs!QName) ("" "role_name")) (const (type !xs!string) ,role-name)) (attribute (const (type !xs!QName) ("" "grantor")) (const (type !xs!string) ,grantor)))) (sequence (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantee)) (var ("" "$v")) (sequence))))) (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "roles")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantee)) (var ("" "$v")) (sequence))))))))
    ))


; precompiled query for UPDATE metadata while
; GRANT "privilege" ON [DOCUMENT | COLLECTION] "doc" TO "user|role" 
(define sc:q11
  (lambda (grantor privilege doc type-obj grantee)
    `(update (prolog) (insert-into (element (const (type !xs!QName) ("" "privilege")) (sequence (element (const (type !xs!QName) ("" "pr_name")) (const (type !xs!string) ,privilege)) (element (const (type !xs!QName) ("" "database_obj")) (sequence (attribute (const (type !xs!QName) ("" "type_obj")) (const (type !xs!string) ,type-obj)) (const (type !xs!string) ,doc))) (element (const (type !xs!QName) ("" "grantor")) (const (type !xs!string) ,grantor)))) (sequence (ddo (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantee)) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "privileges")) (type *) (const (type !xs!string) "non-nil")))))) (ddo (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "roles")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantee)) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "privileges")) (type *) (const (type !xs!string) "non-nil")))))))))
    ))
     
           
; precompiled query for Security checking while
; GRANT "privilege" ON "doc" TO "user|role" (does grantor have a privilege OWNER on doc?)

(define sc:q12
  (lambda (grantor doc)
    `(query (prolog) (query-body (if@ (!fn!not (!fn!empty (sequence (ddo (return (child (ddo (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "roles")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (ddo (attr-axis (ddo (child (ddo (return (child (ddo (child (ddo (parent (ddo (parent (var ("" "$v")) (type (node-test)))) (type (node-test)))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantor)) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil")))))) (type (attr-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil"))))))) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "privileges")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "privilege")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (and@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "pr_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) "OWNER")) (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "database_obj")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,doc))) (var ("" "$v")) (sequence))))) (ddo (return (child (ddo (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantor)) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "privileges")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "privilege")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (and@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "pr_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) "OWNER")) (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "database_obj")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,doc))) (var ("" "$v")) (sequence)))))))) (const (type !xs!boolean) true) (!fn!error (!fn!QName (const (type !xs!string) "http://www.modis.ispras.ru/sedna") (const (type !xs!string) "SE3072")) (const (type !xs!string) "User is not allowed to grant this privilege ")))))
    ))

; precompiled query for Security checking while
; REVOKE "privilege" ON "doc" FROM "user|role" (does grantee have a privilege "privilege" on doc with grantor "grantor"?)
(define sc:q13
  (lambda (grantor privilege doc-name type-obj grantee)
    `(query (prolog) (query-body (let@ (sequence (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantee)) (var ("" "$v")) (sequence))))) (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "roles")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantee)) (var ("" "$v")) (sequence)))))) (fun-def ((xs:anyType (var ("" "a")))) (if@ (ddo (return (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantor)) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (attr-axis (var ("" "$v")) (type (attr-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) "DBA")) (var ("" "$v")) (sequence))))) (const (type !xs!boolean) true) (if@ (ddo (return (child (ddo (return (child (ddo (child (var ("" "a")) (type (elem-test (ename (const (type !xs!QName) ("" "privileges")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "privilege")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (and@ (and@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "pr_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,privilege)) (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "grantor")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantor))) (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "database_obj")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,doc-name))) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "database_obj")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (attr-axis (var ("" "$v")) (type (attr-test (ename (const (type !xs!QName) ("" "type_obj")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,type-obj)) (var ("" "$v")) (sequence))))) (const (type !xs!boolean) true) (!fn!error (!fn!QName (const (type !xs!string) "http://www.modis.ispras.ru/sedna") (const (type !xs!string) "SE3072")) (const (type !xs!string) "User is not allowed to revoke this privilege, or the grantee does not have this privilege "))))))))
      ))



; precompiled query for UPDATE metadata while
; REVOKE "privilege" ON "doc" FROM "user|role" (delete the privilege from user|role?)
(define sc:q14
  (lambda (grantor privilege doc-name type-obj grantee)
     `(update (prolog) (delete (sequence (ddo (return (child (ddo (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantee)) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "privileges")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "privilege")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (and@ (and@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "pr_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,privilege)) (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "database_obj")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,doc-name))) (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "grantor")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantor))) (var ("" "$v")) (sequence))))) (ddo (return (child (ddo (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "roles")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantee)) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "privileges")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "privilege")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (and@ (and@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "pr_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,privilege)) (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "database_obj")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,doc-name))) (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "grantor")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantor))) (var ("" "$v")) (sequence))))))))
    ))



; precompiled query for Security checking while
; REVOKE "role" FROM "user|role" (does grantee has role with grantor="grantor"?)
(define sc:q15
  (lambda (grantor role-name grantee)
    `(query (prolog) (query-body (let@ (sequence (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantee)) (var ("" "$v")) (sequence))))) (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "roles")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantee)) (var ("" "$v")) (sequence)))))) (fun-def ((xs:anyType (var ("" "a")))) (if@ (ddo (return (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantor)) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (attr-axis (var ("" "$v")) (type (attr-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) "DBA")) (var ("" "$v")) (sequence))))) (const (type !xs!boolean) true) (if@ (ddo (return (child (var ("" "a")) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (and@ (=@ (ddo (attr-axis (var ("" "$v")) (type (attr-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,role-name)) (=@ (ddo (attr-axis (var ("" "$v")) (type (attr-test (ename (const (type !xs!QName) ("" "grantor")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantor))) (var ("" "$v")) (sequence))))) (const (type !xs!boolean) true) (!fn!error (!fn!QName (const (type !xs!string) "http://www.modis.ispras.ru/sedna") (const (type !xs!string) "SE3072")) (const (type !xs!string) "User is not allowed to revoke this role, or the grantee does not have this role"))))))))
    ))




; precompiled query for UPDATE metadata while
; REVOKE "role" FROM "user|role" (delete the role from user|role?)
(define sc:q16
  (lambda (grantor role-name grantee)
    `(update (prolog) (delete (sequence (ddo (return (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantee)) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (and@ (=@ (ddo (attr-axis (var ("" "$v")) (type (attr-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,role-name)) (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "grantor")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantor))) (var ("" "$v")) (sequence))))) (ddo (return (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "roles")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantee)) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (and@ (=@ (ddo (attr-axis (var ("" "$v")) (type (attr-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,role-name)) (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "grantor")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantor))) (var ("" "$v")) (sequence))))))))
    ))

; precompiled query for UPDATE metadata while
; LOAD "" ""/CREATE DOCUMENT ""/CREATE COLLECTION ""/CREATE INDEX ""(insert OWNER privilege on the LOADED/CREATED document/collection/index to the user)
(define sc:q17
  (lambda (user doc-name type-obj)
    `(update (prolog) (insert-into (element (const (type !xs!QName) ("" "privilege")) (sequence (element (const (type !xs!QName) ("" "pr_name")) (const (type !xs!string) "OWNER")) (element (const (type !xs!QName) ("" "database_obj")) (sequence (attribute (const (type !xs!QName) ("" "type_obj")) (const (type !xs!string) ,type-obj)) ,doc-name)) (element (const (type !xs!QName) ("" "grantor")) (const (type !xs!string) ,user)))) (ddo (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,user)) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "privileges")) (type *) (const (type !xs!string) "non-nil"))))))))
    ))

; precompiled query for Update metadata while
; CREATE USER "username" (insert new <user>)
(define sc:q18
  (lambda (user newuser password)
    `(update (prolog) (insert-into (element (const (type !xs!QName) ("" "user")) (sequence (element (const (type !xs!QName) ("" "user_name")) (const (type !xs!string) ,newuser)) (element (const (type !xs!QName) ("" "user_psw")) (const (type !xs!string) ,password)) (element (const (type !xs!QName) ("" "creator")) (const (type !xs!string) ,user)) (element (const (type !xs!QName) ("" "privileges")) (sequence)) (element (const (type !xs!QName) ("" "role")) (sequence (attribute (const (type !xs!QName) ("" "role_name")) (const (type !xs!string) "PUBLIC")) (attribute (const (type !xs!QName) ("" "grantor")) (const (type !xs!string) ,user)))))) (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil"))))))))
        ))

; precompiled query for Security checking while
; ALTER USER "username" (User can change its own password or he has DBA role or he is a creator)
(define sc:q19
  (lambda (user alter-user)
    `(query (prolog) (query-body (if@ (or@ (or@ (=@ (const (type !xs!string) ,user) (const (type !xs!string) ,alter-user)) (ddo (return (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,user)) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (attr-axis (var ("" "$v")) (type (attr-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) "DBA")) (var ("" "$v")) (sequence)))))) (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (and@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,alter-user)) (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "creator")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,user))) (var ("" "$v")) (sequence)))))) (const (type !xs!boolean) true) (!fn!error (!fn!QName (const (type !xs!string) "http://www.modis.ispras.ru/sedna") (const (type !xs!string) "SE3072")) (const (type !xs!string) "User is not allowed to alter specified user")))))
    ))

; precompiled query for Update metadata while
; ALTER USER "username" WITH PASSWORD "password" (first query - delete password)
(define sc:q20
  (lambda (alter-user)
    `(update (prolog) (delete (ddo (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,alter-user)) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "user_psw")) (type *) (const (type !xs!string) "non-nil"))))))))
    ))

; precompiled query for Update metadata while
; ALTER USER "username" WITH PASSWORD "password" (second query - insert new password)
(define sc:q21
  (lambda (alter-user newpassword)
    `(update (prolog) (insert-into (element (const (type !xs!QName) ("" "user_psw")) (const (type !xs!string) ,newpassword)) (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,alter-user)) (var ("" "$v")) (sequence)))))))
    ))

; precompiled query for Security checking while
; DROP USER "username" (User can drop himself or he has DBA role or he is a creator)
(define sc:q22
  (lambda (user drop-user)
    `(query (prolog) (query-body (if@ (or@ (or@ (=@ (const (type !xs!string) ,user) (const (type !xs!string) ,drop-user)) (ddo (return (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,user)) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (attr-axis (var ("" "$v")) (type (attr-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) "DBA")) (var ("" "$v")) (sequence)))))) (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (and@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,drop-user)) (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "creator")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,user))) (var ("" "$v")) (sequence)))))) (const (type !xs!boolean) true) (!fn!error (!fn!QName (const (type !xs!string) "http://www.modis.ispras.ru/sedna") (const (type !xs!string) "SE3072")) (const (type !xs!string) "User is not allowed to drop specified user")))))
    ))
; precompiled query for Update metadata while
; DROP USER "username" ( deleting <user>)
(define sc:q23
  (lambda (drop-user)
    `(update (prolog) (delete (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,drop-user)) (var ("" "$v")) (sequence)))))))
    ))

;precompiled query for security checking - is user a DBA?
(define sc:q24
  (lambda (user)
    `(query (prolog) (query-body (if@ (ddo (return (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,user)) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (attr-axis (var ("" "$v")) (type (attr-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) "DBA")) (var ("" "$v")) (sequence))))) (const (type !xs!boolean) true) (!fn!error (!fn!QName (const (type !xs!string) "http://www.modis.ispras.ru/sedna") (const (type !xs!string) "SE3072")) (const (type !xs!string) "User is not allowed to grant this privilege")))))
    ))

;precompiled query for Update metadata while GRANT "priv" ON DATABASE TO "grantee"
(define sc:q25
  (lambda (user privilege grantee)
    `(update (prolog) (insert-into (element (const (type !xs!QName) ("" "privilege")) (sequence (element (const (type !xs!QName) ("" "pr_name")) (const (type !xs!string) ,privilege)) (element (const (type !xs!QName) ("" "grantor")) (const (type !xs!string) ,user)))) (sequence (ddo (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantee)) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "privileges")) (type *) (const (type !xs!string) "non-nil")))))) (ddo (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "roles")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantee)) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "privileges")) (type *) (const (type !xs!string) "non-nil")))))))))
    ))

;precompiled query for Security Check while REVOKE privileges ON DATABASE FROM "user"
(define sc:q26
  (lambda (user privilege grantee)
   `(update (prolog) (delete (sequence (ddo (return (child (ddo (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantee)) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "privileges")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "privilege")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (and@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "pr_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,privilege)) (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "grantor")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,user))) (var ("" "$v")) (sequence))))) (ddo (return (child (ddo (child (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "roles")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,grantee)) (var ("" "$v")) (sequence))))) (type (elem-test (ename (const (type !xs!QName) ("" "privileges")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "privilege")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (and@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "pr_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,privilege)) (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "grantor")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,user))) (var ("" "$v")) (sequence))))))))
  ))

;precompiled query for Check while CREATE USER: does a user with the same name already exists?
(define sc:q27
  (lambda (user)
   `(query (prolog) (query-body (if@ (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "users")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "user")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$v")))) (if@ (=@ (ddo (child (var ("" "$v")) (type (elem-test (ename (const (type !xs!QName) ("" "user_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,user)) (var ("" "$v")) (sequence))))) (!fn!error (!fn!QName (const (type !xs!string) "http://www.modis.ispras.ru/sedna") (const (type !xs!string) "SE3072")) (const (type !xs!string) "User with this name already exists")) (sequence))))
  ))

;precompiled query for Check while CREATE ROLE: does a role with the same name already exists; role-name is not "DBA", "PUBLIC"?
(define sc:q28
  (lambda (role)
    `(query (prolog) (query-body (if@ (or@ (or@ (ddo (return (child (ddo (child (ddo (child (!fn!document (const (type !xs!string) "db_security_data")) (type (elem-test (ename (const (type !xs!QName) ("" "db_security_data")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "roles")) (type *) (const (type !xs!string) "non-nil")))))) (type (elem-test (ename (const (type !xs!QName) ("" "role")) (type *) (const (type !xs!string) "non-nil"))))) (fun-def ((!xs!anyType (var ("" "$%v")))) (if@ (=@ (ddo (child (var ("" "$%v")) (type (elem-test (ename (const (type !xs!QName) ("" "role_name")) (type *) (const (type !xs!string) "non-nil")))))) (const (type !xs!string) ,role)) (var ("" "$%v")) (sequence))))) (=@ (const (type !xs!string) ,role) (const (type !xs!string) "DBA"))) (=@ (const (type !xs!string) ,role) (const (type !xs!string) "PUBLIC"))) (!fn!error (!fn!QName (const (type !xs!string) "http://www.modis.ispras.ru/sedna") (const (type !xs!string) "SE3072")) (const (type !xs!string) "Role with this name already exists")) (const (type !xs!boolean) true))))
  ))


