/* */

gconstructor! [in_context in_c] >[out_context out_c]:
	   ec:elemConstructor[in_c] >[out_c]    <<#gconstructor=ec;>>
	 | ac:attrConstructor[in_c] >[out_c]    <<#gconstructor=ac;>>
	 | nc:namespaceConstructor[in_c] >[out_c] <<#gconstructor=nc;>>
	 | dc:docConstructor[in_c] >[out_c] <<#gconstructor=dc;>>
	 | cc:commentConstructor[in_c] >[out_c] <<#gconstructor=cc;>>
	 | tc:textConstructor[in_c] >[out_c] <<#gconstructor=tc;>>
	 | pic:piConstructor[in_c] >[out_c] <<#gconstructor=pic;>>
;


elemConstructor! [in_context in_c] >[out_context out_c]:
	<<SORASTBase *atts=NULL, *ecnt=NULL, *elname=NULL;
	>>

	#(AST_ELEMENT 
	  #(AST_ELEMENT_NAME 
            (   qn:qname

	        <<elname=#(#["const"], #(#["type"], #["!xs!QName"]), qn);>>

	      |  e:expr[in_c] >[out_c] <<elname=e;>>
	    )
	   )
	   #(AST_ELEMENT_ATTRIBUTES 
	     ( ats:attrConstructor[in_c] >[out_c] //_out_c2 must be max 
	       <<if(atts==NULL) atts=ats; else atts->append(ats);>>

	      | nc:namespaceConstructor[in_c] >[out_c] 
	       <<if(atts==NULL) atts=nc; else atts->append(nc);>>

	     )*)

	   #(AST_CONTENT 
	     (ec:elemContent[in_c] >[out_c] 
	      <<if(ecnt==NULL) ecnt=ec; else ecnt->append(ec); >>)*)
	 )

	 <<if(atts!=NULL){
	     if(ecnt!=NULL)
	       if(ecnt->nsiblings()>1)
	         #elemConstructor=
	            #(#["element"], elname, #(#["sequence"], atts, ecnt));
	       else
	         #elemConstructor=
	            #(#["element"], elname, #(#["sequence"], atts, ecnt));

	     else
	       #elemConstructor=
	         #(#["element"], elname, #(#["sequence"], atts));
	   }
	   else{//atts==NULL
	     if(ecnt!=NULL){
	       if(ecnt->nsiblings()>1)
	         #elemConstructor=
	            #(#["element"], elname, #(#["sequence"], ecnt));
	       else
	         #elemConstructor=
	            #(#["element"], elname, ecnt);
	     }
	     else
	       #elemConstructor=
	         #(#["element"], elname, #(#[], #["sequence"]));

	   }
	 >> 
;

attrConstructor! [in_context in_c] >[out_context out_c]:
	<<SORASTBase *cnt=NULL, *attr_name=NULL;
	>>
	#(AST_ATTRIBUTE
	  #(AST_ATTRIBUTE_NAME  
            (  qn:qname 
	       <<attr_name=#(#["const"], #(#["type"], #["!xs!QName"]), qn);
	              	     >>
  	     | e:expr[in_c] >[out_c]
  	       <<attr_name=e;>>
  	    )   
  	   )

	  #(AST_CONTENT 
	    (ac:attrContent[in_c] >[out_c]
	     <<if(cnt==NULL) cnt=ac; else cnt->append(ac); >>)*
	   )                                                                
	 )

	<<if(cnt!=NULL)
	    if(cnt->nsiblings()>1)
	      #attrs=#(#["attribute"], attr_name, #(#["sequence"], cnt));
	    else
	      #attrs=#(#["attribute"], attr_name, cnt);
	  else 
	    #attrs=#(#["attribute"], attr_name, #(#[], #["sequence"]));
	>>
;

attrContent! [in_context in_c] >[out_context out_c]:
	<<SORASTBase *att_cont=NULL;>>
	(	
	  cs:AST_CHAR_SEQ 

	  <<att_cont=#(#["const"], 
	               #(#["type"], #["!xs!string"]),
	               #[std::string("\"")+cs->getText()+"\""]);
	  >>

	| e:expr[in_c] >[out_c]
	  << att_cont=e; >>

	)
	<<#attrContent=att_cont;>>
;

elemContent! [in_context in_c] >[out_context out_c]:
	<<SORASTBase *elm_cont=NULL;>>
	(
	  cs:AST_CHAR_SEQ 

	  <<elm_cont=#(#["const"], 
	                #(#["type"], #["!xs!string"]),
	                #[std::string("\"")+cs->getText()+"\""]);
	  >>

	| e:expr[in_c] >[out_c]
	<<elm_cont=e;>>

	| gc:gconstructor[in_c] >[out_c]
 	  <<elm_cont=gc;>>
	)
	<<#elemContent=elm_cont;>>
;

namespaceConstructor! [in_context in_c] >[out_context out_c]:
	<<SORASTBase *cnt=NULL, *nc_name=NULL;>>
	#(AST_NAMESPACE
	  #(AST_NAMESPACE_NAME  
             pr:AST_PREFIX
	      <<nc_name=#(#["const"], #(#["type"], #["!xs!NCName"]), #[pr->getText()]);>>
  	       
  	   )

	  #(AST_CONTENT 
	    (ac:attrContent[in_c] >[out_c]
	     <<if(cnt==NULL) cnt=ac; else cnt->append(ac); >>)*
	   )                                                                
	 )

	<<if(cnt!=NULL)
	    if(cnt->nsiblings()>1)
	      #attrs=#(#["namespace"], nc_name, #(#["sequence"], cnt));
	    else
	      #attrs=#(#["namespace"], nc_name, cnt);
	  else 
	    #attrs=#(#["namespace"], nc_name, #(#[], #["sequence"]));
	>>
;

docConstructor! [in_context in_c] >[out_context out_c]:

	#(AST_DOCUMENT_CONSTR e:expr[in_c] >[out_c])

	<<#docConstructor=#(#["document"], e);>>
;

commentConstructor! [in_context in_c] >[out_context out_c]:

	#(AST_COMMENT_CONSTR 
	    (  e:expr[in_c] >[out_c] <<#commentConstructor=#(#["comment"], e);>>
	     | s:AST_STRING_CONST <<#commentConstructor=#(#["comment"], #(#["const"], #(#["type"], #["!xs!string"]), #[std::string("\"") + std::string(s->getText()) + std::string("\"")]));>>
	    )
	 )

	
;

textConstructor! [in_context in_c] >[out_context out_c]:

	#(AST_TEXT_CONSTR e:expr[in_c] >[out_c])

	<<#textConstructor=#(#["text"], e);>>
;

piConstructor! [in_context in_c] >[out_context out_c]:
	#(AST_PI_CONSTR (n:AST_LOCAL_NAME  | e1:expr[in_c] >[out_c]) {(e2:expr[in_c] >[out_c] | s:AST_STRING_CONST)})
	<<
	  SORASTBase* instr = NULL;
	  if (e2 != NULL) instr= e2; else if (s != NULL) instr= #(#["const"], #(#["type"], #["!xs!string"]), s);

	  if (e1 != NULL)
	     #piConstructor=#(#["pi"], e1, instr); 
	  else if (n != NULL)
	        #piConstructor=#(#["pi"], #(#["const"], #(#["type"], #["!xs!NCName"]), #[n->getText()]), instr); 
	>>
;

	