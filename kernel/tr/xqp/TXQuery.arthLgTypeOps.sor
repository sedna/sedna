/* */

arithmLogicalTypeExpr![in_context in_c] >[out_context out_c]:

	  #(op:AST_B_OP eb1:expr[in_c] >[out_c] eb2:expr[in_c] >[out_c])
	  <<
	    #arithmLogicalExpr=
	        #(#[std::string(op->getText())+"@"], eb1, eb2);


	  >>
	| #(op:AST_UNARY_OP eu:expr[in_c] >[out_c])
	  <<#arithmLogicalExpr=
	        #(#[std::string(op->getText())+"@"], eu);
	  >>
	| #(AST_INSTANCE_OF ioe:expr[in_c] >[out_c] stio:sequenceType)
	  <<#arithmLogicalExpr=
	        #(#["instance-of"], ioe, #(#["type"], stio));
	  >>
	| #(AST_CAST ce:expr[in_c] >[out_c] st:singleType)
	  <<#arithmLogicalExpr=
	       #(#["cast"], ce, #(#["type"], st));
	  >>
	| #(AST_CASTABLE cas:expr[in_c] >[out_c] stc:singleType)
	  <<#arithmLogicalExpr=
	       #(#["castable"], cas, #(#["type"], stc));
	  >>

	| #(AST_TREAT te:expr[in_c] >[out_c] tst:sequenceType)
	  <<#arithmLogicalExpr=
	       #(#["treat"], te, #(#["type"], tst));
	  >>

	| rpe:relativePathExpr[in_c] >[out_c]

	  <<#arithmLogicalExpr=rpe;>>
	| exe:extensionExpr[in_c] >[out_c]  <<#arithmLogicalExpr=exe;>>
;


typeswitchExpr![in_context in_c] >[out_context out_c]:

	#(AST_TYPESWITCH 
	  e1:expr[in_c]>[out_c]
	  cc:caseClauses[in_c]>[out_c]
	  #(AST_DEFAULT_TS v:vardecl e2:exprSingle[in_c]>[out_c]))
	<<cc->addChild(#(#["default"], #(#["fun-def"], #(#[], #(#["!xs!anytype"], v)), e2)));
	  #typeswitchExpr=#(#["ts"], e1, cc);
	>>
;

caseClauses![in_context in_c] >[out_context out_c]:

	#(AST_CASES
	   <<#caseClauses=#(#["cases"]);>>
	   (#(AST_CASE_TS v:vardecl t:sequenceType e:exprSingle[in_c] >[out_c]
	    )
	     <<#caseClauses->addChild(#(#["case"], #(#["type"], t), #(#["fun-def"], #(#[], #(#["!xs!anytype"], v)), e)));>>
	   )+
	 )
;

extensionExpr![in_context in_c] >[out_context out_c]:
	<<
	  SORASTBase* pragmas=#["pragmas"];
	>>

	#(AST_EXTENSION_EXPR #(AST_PRAGMAS 
	   (#(AST_PRAGMA q:qname s:AST_STRING_CONST)
	      <<pragmas->addChild(#(#["pragma"], q, #(#["const"], #(#["type"], #["!xs!string"]), #[std::string("\"") + std::string(s->getText()) + std::string("\"")])));
	      >>
	   )+) {e:expr[in_c] >[out_c]})

	<<#extensionExpr=#(#["extension-expr"], pragmas, e);>>
;