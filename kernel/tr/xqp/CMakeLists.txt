include(CompareVersions)

set(xqp_SRC XQueryDriver.cpp XQuerytoLR.cpp XQueryModule.cpp XQFunction.cpp modules.cpp XQParser.y XQLexer.l)

# files generated by flex and bison
set(generated_parser_files XQueryParser.cpp XQueryParser.hpp location.hh position.hh stack.hh)
set(generated_lexer_files XQueryLexer.cpp)
list(APPEND xqp_SRC ${generated_parser_files} ${generated_lexer_files})

set(GEN_PARSER 1) # 1 -- means we'll use bison
set(GEN_LEXER 1)  # 1 -- means we'll use flex

find_package(BISON)
if (BISON_FOUND)
    COMPARE_VERSION_STRINGS(${BISON_VERSION} "2.3" ver_res)
    if (ver_res EQUAL -1)
        message(STATUS "Bison version is less than 2.3 -- cannot build parser")
        set(GEN_PARSER 0)
    endif (ver_res EQUAL -1)
    COMPARE_VERSION_STRINGS("2.5" ${BISON_VERSION} ver_res)
    if (ver_res EQUAL -1)
        message(STATUS "Bison version is greater than 2.5 -- cannot build parser")
        set(GEN_PARSER 0)
    endif (ver_res EQUAL -1)
else (BISON_FOUND)
        message(STATUS "Bison is not found -- cannot build parser")
        set(GEN_PARSER 0)
endif (BISON_FOUND)

find_package(FLEX)
if (FLEX_FOUND)
    COMPARE_VERSION_STRINGS(${FLEX_VERSION} "2.5.33" ver_res)
    if (ver_res EQUAL -1)
        message(STATUS "Flex version is less than 2.5.33 -- cannot build lexer")
        set(GEN_LEXER 0)
    endif (ver_res EQUAL -1)
else (FLEX_FOUND)
        message(STATUS "Flex is not found -- cannot build lexer")
        set(GEN_LEXER 0)
endif (FLEX_FOUND)

if (GEN_PARSER)
    file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/xqp)
    BISON_TARGET(XQParser xqp/XQParser.y ${CMAKE_CURRENT_BINARY_DIR}/xqp/XQueryParser.cpp)
    foreach (gen_src ${generated_parser_files})
        source_group("xqp\\Generated Parser" FILES ${CMAKE_CURRENT_BINARY_DIR}/xqp/${gen_src})
        set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/xqp/${gen_src} PROPERTIES GENERATED TRUE)
    endforeach (gen_src)
else (GEN_PARSER)
    message(STATUS "Using pre-generated parser files -- ${generated_parser_files}")
    list(APPEND dep_files ${CMAKE_CURRENT_BINARY_DIR}/xqp/XQueryLexer.cpp)
    foreach (pf ${generated_parser_files})
        if (NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/xqp/${pf})
            MESSAGE(FATAL_ERROR "Pregenerated parser file ${CMAKE_CURRENT_SOURCE_DIR}/xqp/${pf} not found. Use Sedna source build or generate it manually")
        endif (NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/xqp/${pf})
    endforeach (pf)
endif (GEN_PARSER)

if (GEN_LEXER)
    file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/xqp)
    FLEX_TARGET(XQLexer xqp/XQLexer.l ${CMAKE_CURRENT_BINARY_DIR}/xqp/XQueryLexer.cpp)
    foreach (gen_src ${generated_lexer_files})
        source_group("xqp\\Generated Parser" FILES ${CMAKE_CURRENT_BINARY_DIR}/xqp/${gen_src})
    endforeach (gen_src)
    set(USING_PREGEN_LEXER 0 CACHE INTERNAL "Set to 1 if we're using our own lexer files")
else (GEN_LEXER)
    message(STATUS "Using pre-generated lexer files -- ${generated_lexer_files}")
    foreach (lf ${generated_lexer_files})
        if (NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/xqp/${lf})
            MESSAGE(FATAL_ERROR "Pregenerated lexer file ${CMAKE_CURRENT_SOURCE_DIR}/xqp/${lf} not found. Use Sedna source build or generate it manually")
        endif (NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/xqp/${lf})
    endforeach (lf)
    set(USING_PREGEN_LEXER 1 CACHE INTERNAL "Set to 1 if we're using our own lexer files")
endif (GEN_LEXER)

ADD_SUBFOLDER_SRC(xqp_SRC ast)
ADD_SUBFOLDER_SRC(xqp_SRC visitor)
ADD_SUBFOLDER_SRC(xqp_SRC sema)
ADD_SUBFOLDER_SRC(xqp_SRC serial)
ADD_SUBFOLDER_SRC(xqp_SRC lr)
ADD_SUBFOLDER_SRC(xqp_SRC lreturn)
ADD_SUBFOLDER_SRC(xqp_SRC lr2por)
