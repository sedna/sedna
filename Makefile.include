# Configuration constants

# options: Release configuration - Release
#          Debug   configuration - Debug
#                  See also EL_DEBUG constant
ifndef ACTIVE_CONFIGURATION
ACTIVE_CONFIGURATION = Debug
endif

# options: Compile latex files        - 1
#          Do not compile latex files - 0
ifndef MAKE_DOC
MAKE_DOC = 1
endif
ifndef INSTALL_DOC
INSTALL_DOC = 1
endif

# options: debug logging is on  - 1
#          debug logging is off - 0
ifndef EL_DEBUG
EL_DEBUG = 1
endif

# options: recovery testing is on  - 1
#          recovery testing is off - 0
ifndef RCV_TEST
RCV_TEST = 0
endif

# options: Compile java files        - 1
#          Do not compile java files - 0
ifndef JAVA_DRIVER
JAVA_DRIVER = 1
endif

# options: SQL connection is on  - 1
#          SQL connection is off - 0
ifndef SQL_CONNECTION
SQL_CONNECTION = 0
endif

# options: Static system libraries is on  - 1
#          Static system libraries is off - 0
#          Ignored under Darwin, SunOS, Windows
ifndef STATIC_SYS_LIBS
STATIC_SYS_LIBS = 0
endif

# options: Enable gcov coverage tests  - 1
#          Disable gcov coverage tests - 0
ifndef SE_ENABLE_GCOV
SE_ENABLE_GCOV = 0
endif

# options: Enable dtsearch  - 1
#          Disable dtsearch - 0
ifndef ENABLE_DTSEARCH
ENABLE_DTSEARCH = 0
endif

# options: Enable ftsearch  - 1
#          Disable ftsearch - 0
ifndef ENABLE_FTSEARCH
ENABLE_FTSEARCH = 1
endif

# options: triggers is on  - 1
#          triggers is off - 0
ifndef ENABLE_TRIGGERS
ENABLE_TRIGGERS = 1
endif

# options: static libodbc - 1
#          shared libodbc - 0
ifndef LIBODBC_STATIC
LIBODBC_STATIC = 0
endif

# options: use libedit in term - 1
#          disable libedit     - 0
ifndef ENABLE_LIBEDIT
ENABLE_LIBEDIT = 1
endif

# options: perform libaries cleanup on make clean - 1
#          else                                   - 0
ifndef CLEANUP_LIBRARIES
CLEANUP_LIBRARIES = 0
endif


# SEDNA_BUILD is defined outside when release version is made
ifndef SEDNA_BUILD
SEDNA_BUILD = $(shell if test -r $(PP)/build; then cat $(PP)/build; else echo 0; fi)
endif


SEDNA_VERSION := $(shell cat $(PP)/ver)


SEDNA_DIRS = $(PP)/kernel $(PP)/libs $(PP)/libs/chicken \
             $(PP)/driver/c $(PP)/export $(PP)/term $(PP)/libs/dtsearch/include \
             $(PP)/libs/libedit/include/editline


ifndef INCLUDE_DIRS
INCLUDE_DIRS = $(SEDNA_DIRS)
endif


# INCLUDE_DIRS should be defined
INCLUDE_DIRECTIVES_VC = $(foreach inc, $(INCLUDE_DIRS), /I$(inc)) /I$(PP)/libs/compat
INCLUDE_DIRECTIVES_GCC = $(foreach inc, $(INCLUDE_DIRS), -I$(inc))


M4 = m4
MKDIR = mkdir
INSTALL = install
ECHO = echo
REMOVE = rm -f
REMOVE_DIR = rm -f -r
COPY = cp -r
PDFLATEX = pdflatex
LIST_EXT = .lst

include $(PP)/Makefile.platform


ifeq ("$(OS)", "CYGWIN_NT")
# Win32
CC = cl /c
CCX = cl /c
LD = link
LB = lib
MT = mt
LDOUT = /out:
LIBOUT = /OUT:
LIBFLAGS = /NOLOGO
OBJ_EXT = .obj
LIB_EXT = .lib
EXE_EXT = .exe
DL_EXT  = .dll
DEF_EXT = .def

ENABLE_LIBEDIT = 0

# Starting in Visual C++ 2005, LIBCP.LIB and LIBCPD.LIB (via the old /ML and /MLd options) have been removed.
# Use LIBCPMT.LIB and LIBCPMTD.LIB instead via the /MT and /MTd options.
# Moreover, if you link your program from the command line without a compiler option (CFLAGS_ST) that specifies
# a C run-time library, the linker will use LIBCMT.LIB. This is different from previous versions of Visual C++
# which used LIBC.LIB, the single-threaded library, instead.

# Win32 Debug configuration
ifeq ("$(ACTIVE_CONFIGURATION)","Debug")
CFLAGS_ST   = /nologo /Zi /Od $(INCLUDE_DIRECTIVES_VC) /D _CONSOLE /DEL_DEBUG=$(EL_DEBUG) \
              /DSEDNA_VERSION=\"$(SEDNA_VERSION)\" /DSEDNA_BUILD=\"$(SEDNA_BUILD)\" \
              /DC_EMBEDDED /DC_NO_PIC_NO_DLL /DXML_STATIC \
              /D_CRT_SECURE_NO_DEPRECATE /DDEBUGI=1 /D__STDC_CONSTANT_MACROS /D__STDC_LIMIT_MACROS /D__STDC_FORMAT_MACROS
CPPFLAGS_ST = /nologo /Zi /Od /EHsc /GR  $(INCLUDE_DIRECTIVES_VC) /D _CONSOLE \
              /DACTIVE_CONFIGURATION=\"$(ACTIVE_CONFIGURATION)\" /DEL_DEBUG=$(EL_DEBUG) \
              /DSEDNA_VERSION=\"$(SEDNA_VERSION)\" /DSEDNA_BUILD=\"$(SEDNA_BUILD)\" \
              /DC_EMBEDDED /DXML_STATIC /D_CRT_SECURE_NO_DEPRECATE /DDEBUGI=1 /D__STDC_CONSTANT_MACROS /D__STDC_LIMIT_MACROS \
              /D__STDC_FORMAT_MACROS
CFLAGS      = $(CFLAGS_ST) /MTd
CFLAGS_DL   = $(CFLAGS_ST) /MDd
CFLAGS_NOOPTIM = $(CFLAGS)
CPPFLAGS    = $(CPPFLAGS_ST) /MTd
LFLAGS_NOLIB= /NOLOGO /INCREMENTAL:NO /DEBUG /PROFILE
LFLAGS      = $(LFLAGS_NOLIB) /NODEFAULTLIB:LIBC.LIB \
              /NODEFAULTLIB:LIBCD.LIB /NOD:LIBCMT.LIB /LIBPATH:$(CHICKEN_HOME) /LIBPATH:$(PP)/libs /LIBPATH:$(PP)/libs/expat \
              /LIBPATH:$(PP)/libs/dtsearch/lib /LIBPATH:$(PP)/libs/pcre \
              libchicken-static.lib WS2_32.lib Advapi32.lib libexpatmt.lib \
              libpcre.lib
ifeq ($(ENABLE_DTSEARCH),1)
LFLAGS_DTS  = /NOLOGO /SUBSYSTEM:CONSOLE /INCREMENTAL:NO /NODEFAULTLIB:LIBC.LIB \
              /NODEFAULTLIB:LIBCD.LIB /NODEFAULTLIB:Nafxcw.lib /LIBPATH:$(CHICKEN_HOME) /LIBPATH:$(PP)/libs \
              /LIBPATH:$(PP)/libs/expat /LIBPATH:$(PP)/libs/dtsearch/lib \
              /LIBPATH:$(PP)/libs/pcre libchicken-static.lib \
              WS2_32.lib Advapi32.lib libexpatmt.lib libpcre.lib	\
              /DEBUG /PROFILE /NOD:LIBCMT.LIB
endif
else
# Win32 Release configuration
CFLAGS_ST   = /nologo /O2 $(INCLUDE_DIRECTIVES_VC) /D _CONSOLE /DEL_DEBUG=$(EL_DEBUG) \
              /DSEDNA_VERSION=\"$(SEDNA_VERSION)\" /DSEDNA_BUILD=\"$(SEDNA_BUILD)\" \
              /DC_EMBEDDED /DC_NO_PIC_NO_DLL /DXML_STATIC \
              /D_CRT_SECURE_NO_DEPRECATE /DDEBUGI=0 /D__STDC_CONSTANT_MACROS /D__STDC_LIMIT_MACROS /D__STDC_FORMAT_MACROS
CPPFLAGS_ST = /nologo /O2 /EHsc /GR $(INCLUDE_DIRECTIVES_VC) /D _CONSOLE \
              /DACTIVE_CONFIGURATION=\"$(ACTIVE_CONFIGURATION)\" /DEL_DEBUG=$(EL_DEBUG) \
              /DSEDNA_VERSION=\"$(SEDNA_VERSION)\" /DSEDNA_BUILD=\"$(SEDNA_BUILD)\" \
              /DC_EMBEDDED /DC_NO_PIC_NO_DLL /DXML_STATIC \
              /D_CRT_SECURE_NO_DEPRECATE /DDEBUGI=0 /D__STDC_CONSTANT_MACROS /D__STDC_LIMIT_MACROS /D__STDC_FORMAT_MACROS
CFLAGS      = $(CFLAGS_ST) /MT
CFLAGS_DL   = $(CFLAGS_ST) /MD
CFLAGS_NOOPTIM = /nologo /Od /Ob2 $(INCLUDE_DIRECTIVES_VC) /D _CONSOLE /DEL_DEBUG=$(EL_DEBUG) \
                 /DSEDNA_VERSION=\"$(SEDNA_VERSION)\" /DSEDNA_BUILD=\"$(SEDNA_BUILD)\" \
                 /DC_EMBEDDED /DC_NO_PIC_NO_DLL /DXML_STATIC /D_CRT_SECURE_NO_DEPRECATE
CPPFLAGS    = $(CPPFLAGS_ST) /MT
LFLAGS_NOLIB= /NOLOGO
LFLAGS      = $(LFLAGS_NOLIB) /NODEFAULTLIB:LIBC.LIB \
              /NODEFAULTLIB:LIBCD.LIB /LIBPATH:$(CHICKEN_HOME) /LIBPATH:$(PP)/libs /LIBPATH:$(PP)/libs/expat \
              /LIBPATH:$(PP)/libs/dtsearch/lib /LIBPATH:$(PP)/libs/pcre \
              libchicken-static.lib LIBCMT.LIB WS2_32.lib Advapi32.lib libexpatmt.lib \
              libpcre.lib
ifeq ($(ENABLE_DTSEARCH),1)
LFLAGS_DTS  = /NOLOGO /SUBSYSTEM:CONSOLE /NODEFAULTLIB:LIBC.LIB \
              /NODEFAULTLIB:LIBCD.LIB /NODEFAULTLIB:Nafxcw.lib /LIBPATH:$(CHICKEN_HOME) \
              /LIBPATH:$(PP)/libs/expat /LIBPATH:$(PP)/libs/dtsearch/lib /LIBPATH:$(PP)/libs/pcre \
              libchicken-static.lib WS2_32.lib Advapi32.lib \
              libexpatmt.lib libpcre.lib /NOD:LIBCMT.LIB
endif
endif

ifeq ($(EL_DEBUG),1)
LFLAGS += Dbghelp.lib
ifeq ($(ENABLE_DTSEARCH),1)
LFLAGS_DTS += Dbghelp.lib
endif
endif

LSLIBS   =

ifeq ($(SQL_CONNECTION),1)
CPPFLAGS+= /DSQL_CONNECTION
endif
ifeq ($(ENABLE_DTSEARCH),1)
CPPFLAGS+= /DSE_ENABLE_DTSEARCH
endif
ifeq ($(ENABLE_FTSEARCH),1)
CPPFLAGS+= /DSE_ENABLE_FTSEARCH
endif
ifeq ($(ENABLE_TRIGGERS),1)
CPPFLAGS+= /DSE_ENABLE_TRIGGERS
CFLAGS+= /DSE_ENABLE_TRIGGERS
endif
ifeq ($(RCV_TEST),1)
CPPFLAGS+= /DRCV_TEST_CRASH
CFLAGS+= /DRCV_TEST_CRASH
endif

CFLAGS_CHICKEN_EXE = /nologo /Zi /Od $(INCLUDE_DIRECTIVES_VC) /MT /D _CONSOLE \
                     /DEL_DEBUG=$(EL_DEBUG) /DC_NO_PIC_NO_DLL
LFLAGS_CHICKEN_EXE = /OPT:NOREF /nologo /subsystem:console /incremental:no /NODEFAULTLIB:LIBC.LIB \
                     /NODEFAULTLIB:LIBCD.LIB /LIBPATH:$(CHICKEN_HOME) LIBCMT.LIB libchicken-static.lib
LSLIBS_CHICKEN_EXE =
CHICKEN_HOME = $(PP)/libs/chicken
CHICKEN = $(CHICKEN_HOME)/chicken-static.exe
CHICKEN_INCLUDE = $(CHICKEN_HOME)
else
# UNIX
CC = gcc -c
CCX = g++ -c
LD = g++
LB = ar
LIBFLAGS = rcs
LDOUT = -o # Space symbol is required there!
LIBOUT =
OBJ_EXT = .o
LIB_EXT = .a
EXE_EXT =
DL_EXT  = .so

STATIC_FLAG =

ifeq ("$(STATIC_SYS_LIBS)","1") # Should be ignored under SunOS, Darwin!
STATIC_FLAG =
ifeq ("$(SUB_PLATFORM)","Linux")
STATIC_FLAG = -static
endif
ifeq ("$(SUB_PLATFORM)","FreeBSD")
STATIC_FLAG = -static
endif
endif

ifeq ("$(ACTIVE_CONFIGURATION)","Debug")

CFLAGS   = -g3 -ggdb -fexceptions -Wall $(INCLUDE_DIRECTIVES_GCC) \
           -DSEDNA_VERSION=\"$(SEDNA_VERSION)\" -DSEDNA_BUILD=\"$(SEDNA_BUILD)\" \
           -DEL_DEBUG=$(EL_DEBUG)  -fno-omit-frame-pointer -fno-strict-aliasing -Wno-unused -Wno-uninitialized -DHAVE_ALLOCA_H \
           -DC_STACK_GROWS_DOWNWARD=1 -DC_USE_C_DEFAULTS -DC_EMBEDDED -DDEBUGI=1 -D__STDC_CONSTANT_MACROS -DC_NO_PIC_NO_DLL -D__STDC_LIMIT_MACROS -D__STDC_FORMAT_MACROS
CFLAGS_NOOPTIM = $(CFLAGS)
CPPFLAGS = -g3 -ggdb -Wall -Wno-deprecated -fexceptions -fno-omit-frame-pointer -fno-strict-aliasing $(INCLUDE_DIRECTIVES_GCC) \
           -DSEDNA_VERSION=\"$(SEDNA_VERSION)\" -DSEDNA_BUILD=\"$(SEDNA_BUILD)\" -DEL_DEBUG=$(EL_DEBUG) \
           -DACTIVE_CONFIGURATION=\"$(ACTIVE_CONFIGURATION)\" -DDEBUGI=1 -D__STDC_CONSTANT_MACROS -D__STDC_LIMIT_MACROS -D__STDC_FORMAT_MACROS
LFLAGS_NOLIB=-g3 -ggdb -fexceptions $(STATIC_FLAG)
LFLAGS   = $(LFLAGS_NOLIB) -L$(PP)/libs/expat -L$(PP)/libs/chicken -L$(PP)/libs/pcre

else # Release

CFLAGS   = -O2 -w -fno-strict-aliasing -fexceptions $(INCLUDE_DIRECTIVES_GCC) \
           -DC_NO_PIC_NO_DLL -DSEDNA_VERSION=\"$(SEDNA_VERSION)\" -DSEDNA_BUILD=\"$(SEDNA_BUILD)\" \
           -DEL_DEBUG=$(EL_DEBUG) -DHAVE_ALLOCA_H \
           -DC_STACK_GROWS_DOWNWARD=1 -DC_USE_C_DEFAULTS -DC_EMBEDDED -DDEBUGI=0 -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS
CFLAGS_NOOPTIM = $(CFLAGS)
CPPFLAGS = -O2 -w -fno-strict-aliasing -fexceptions $(INCLUDE_DIRECTIVES_GCC) \
           -DSEDNA_VERSION=\"$(SEDNA_VERSION)\" -DSEDNA_BUILD=\"$(SEDNA_BUILD)\" -DEL_DEBUG=$(EL_DEBUG) \
           -DACTIVE_CONFIGURATION=\"$(ACTIVE_CONFIGURATION)\" -DDEBUGI=0 -D__STDC_CONSTANT_MACROS -D__STDC_LIMIT_MACROS -D__STDC_FORMAT_MACROS
LFLAGS_NOLIB=-O2 $(STATIC_FLAG) -fexceptions
LFLAGS   = $(LFLAGS_NOLIB) -L$(PP)/libs/expat -L$(PP)/libs/chicken -L$(PP)/libs/pcre

endif

LSLIBS   = -lexpat -lchicken -lpcre -fexceptions
CFLAGS_SL = -fPIC -DSE_NO_EVENT_LOG

ifeq ("$(SUB_PLATFORM)","Linux")
CPPFLAGS += -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
CFLAGS   += -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
LSLIBS   += -lnsl -lrt -pthread -ldl
endif

ifeq ("$(SUB_PLATFORM)","SunOS")
LSLIBS += -lnsl -lrt -lsocket -ldl
CPPFLAGS += -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64
CFLAGS   += -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -D_POSIX_PTHREAD_SEMANTICS
endif

ifeq ("$(SUB_PLATFORM)","FreeBSD")
ENABLE_LIBEDIT = 0
LSLIBS  += -lthr
CFLAGS_SL += -DPIC
endif

ifeq ("$(SUB_PLATFORM)","Darwin")
LSLIBS  += -lpthread
endif


ifeq ($(SQL_CONNECTION),1)
ifeq ($(LIBODBC_STATIC),1)
LSLIBS  += -lodbc -lltdl
CPPFLAGS+= -DLIBODBC_STATIC
endif
CPPFLAGS+= -DSQL_CONNECTION
endif

ifeq ($(SE_ENABLE_GCOV),1)
CFLAGS  += -fprofile-arcs -ftest-coverage
CPPFLAGS+= -fprofile-arcs -ftest-coverage
LSLIBS  += -fprofile-arcs -ftest-coverage
endif

ifeq ($(ENABLE_DTSEARCH),1)
CPPFLAGS+= -DSE_ENABLE_DTSEARCH -D__UNIX__ -DUnicodeText
LFLAGS += -L$(PP)/libs/dtsearch/lib -ldtsearch -lz
endif
ifeq ($(ENABLE_FTSEARCH),1)
CPPFLAGS+= -DSE_ENABLE_FTSEARCH
endif
ifeq ($(ENABLE_TRIGGERS),1)
CPPFLAGS+= -DSE_ENABLE_TRIGGERS
CFLAGS+= -DSE_ENABLE_TRIGGERS
endif
ifeq ($(RCV_TEST),1)
CPPFLAGS+= -DRCV_TEST_CRASH
CFLAGS+= -DRCV_TEST_CRASH
endif


CFLAGS_CHICKEN_EXE = -DC_NO_PIC_NO_DLL $(INCLUDE_DIRECTIVES_GCC) -fomit-frame-pointer \
                     -fno-strict-aliasing -Wall	-Wno-unused -Wno-uninitialized \
                     -DHAVE_ALLOCA_H -DC_STACK_GROWS_DOWNWARD=1 -DC_USE_C_DEFAULTS -fexceptions
LFLAGS_CHICKEN_EXE = -L$(PP)/libs/chicken -fexceptions
LSLIBS_CHICKEN_EXE = -lchicken -fexceptions
CHICKEN_HOME = $(PP)/libs/chicken
CHICKEN = $(CHICKEN_HOME)/chicken
CHICKEN_INCLUDE = $(CHICKEN_HOME)
endif

CHICKEN_HEAP_SPEC = -heap-initial-size 1M
CHICKEN_OPTIONS = $(CHICKEN_HEAP_SPEC) -include-path $(CHICKEN_INCLUDE)

#These targets simplify debugging
Makefile.%: ;
.SUFFIXES:

%$(OBJ_EXT): %.cpp
	$(CCX) $(CPPFLAGS) $<

%$(OBJ_EXT): %.c
	$(CC) $(CFLAGS) $<

%$(OBJ_EXT) %.c: %.scm
	$(CHICKEN) $< -output-file $*.c $(CHICKEN_OPTIONS)
	$(CC) $(CFLAGS_NOOPTIM) $*.c

%.pdf: %.tex
	$(PDFLATEX) $<
	$(PDFLATEX) $<
	$(PDFLATEX) $<


ifeq ("$(OS)", "CYGWIN_NT")
# Win32
%.d: %.c
	@echo "  generating dependencies for $<"
	@set -e; rm -f $@; \
	gcc $(INCLUDE_DIRECTIVES_GCC) -D_WIN32 -MM $< | sed -f $(PP)/depend.sed > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1$(OBJ_EXT) $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

%.d: %.cpp
	@echo "  generating dependencies for $<"
	@set -e; rm -f $@; \
	gcc $(INCLUDE_DIRECTIVES_GCC) -D_WIN32 -MM $< | sed -f $(PP)/depend.sed > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1$(OBJ_EXT) $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$
else
# UNIX
%.d: %.c
	@echo "  generating dependencies for $<"
	@set -e; rm -f $@; \
	gcc $(INCLUDE_DIRECTIVES_GCC) -MM $< | sed -f $(PP)/depend.sed > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1$(OBJ_EXT) $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

%.d: %.cpp
	@echo "  generating dependencies for $<"
	@set -e; rm -f $@; \
	gcc $(INCLUDE_DIRECTIVES_GCC) -MM $< | sed -f $(PP)/depend.sed > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1$(OBJ_EXT) $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$
endif


ifeq ($(MAKECMDGOALS),clean)

generic_clean:
	-$(REMOVE) *$(OBJ_EXT) *$(LIB_EXT) *.bb *.bbg *.da *.map *.pdb vc*.idb *.SUP *.d *.d.* generated

endif

